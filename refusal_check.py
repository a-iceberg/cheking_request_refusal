import logging
import os
import json

import numpy as np
import psycopg

from fastapi import FastAPI
from fastapi.responses import JSONResponse
from openai import AsyncOpenAI, RateLimitError
from anthropic import AsyncAnthropic
from pydantic import BaseModel
from typing import List, Literal

from config_manager import ConfigManager


class Step(BaseModel):
    explanation: str
    output: str


class ReasonResponse(BaseModel):
    reasons: Literal[
        "Не было отказа",
        "Выбранную услугу, ремонт уже оказал или оказывает другой человек: мастер, знакомый и тому подобное, сюда НЕ относится случай когда диагностику уже выполнил другой человек и клиент отказывается от новых работ",
        "Клиент посчитал, что для него дорого стоит именно сама диагностика а не работы,  цена диагностики слишком большая, должна обязательно фигурировать стоимость диагностики, клиент должен отказаться ещё до прибытия мастера на адрес, с большой вероятностью в разговоре будет содержаться слово Диагностика",
        "Техника заработала, неполадка исправилась, проблема решена, не требует вмешательства",
        "Клиент посчитал, что для него дорого стоят именно сами работы а не диагностика, ремонт, услуги, их цена большая, в том числе с учётом возможно предложенной скидки - должна обязательно фигурировать оцененная стоимость работ а не диагностики, а сама причина быть озвучена до прибытия мастера на адрес, возможно клиент откажется сразу после того как ему озвучили примерную цену работ",
        "Оказался сложный ремонт, крупногабаритная техника или ещё какая-то причина, по которой ремонт осуществляется только в стационарном сервисном центре, не на дому",
        "Клиент посчитал, что для него дорого стоит именно сам выезд мастера по его дальнему адресу, не сами услуги / ремонт, цена выезда большая - должна обязательно фигурировать оцененная стоимость выезда, а сама причина быть озвучена до прибытия мастера на адрес",
        "Был осуществлен дублирующий вызов по одной и той же услуге, технике по тому же адресу и в то же время - именно повторный вызов после работ в прошлый раз не подходит и сюда не относится",
        "Заявка по безналичному расчету, оформляется в другом отделе",
        "Был неправильно указан телефон и / или адрес заказчика",
        "Гарантийный ремонт по гарантии именно производителя, не сервисного центра",
        "Не успели привезти необходимую технику - подходит, только если требовалась установка техники или если речь о кондиционерах",
        "Вместо ремонта, услуги клиент решил купить новую технику на замену и обязательно уже оплатил её, ждёт доставку или уже получил - ещё только намерение купить сюда не относится",
        "Компания не осуществляет запрошенные услуги / ремонт конкретной нужной техники",
        "Техника была разобрана и находится в этом же состоянии или в собранном частично, либо же заявка на сборку техники",
        "Не подготовлено должным образом место для работы: недостаточная площадь помещения, техника заставлена предметами, встроена в дорогую мебель и тому подобное",
        "Антисанитарные условия на адресе: насекомые, сильная грязь, захламлённость и тому подобное, помещение требует предварительной санитарной обработки",
        "Именно клиент и мастер не смогли договориться именно сами друг с другом об удобном времени визита",
        "Мастер по той или иной причине не поехал к клиенту, хотя должен был в уже обязательно оговоренное время, также мог изначально в том числе даже не позвонить клиенту",
        "Клиент бросает трубку, не хочет разговаривать - подходит, только если клиент поднял трубку изначально и что-то услышал",
        "Мастер не может дозвониться до клиента, не берут трубку, либо же клиент сам уточнил в разговоре, что не сможет дождаться мастера, не сможет быть по указанному адресу и тому подобное, например клиент заболел или по другим причинам не сможет принять мастера",
        "Нет нужных деталей на складе, либо слишком долго ждать их поставки, либо нет в принципе возможности заказать нужные детали",
        "Недоступны нужные детали по причине именно снятия их с производства производителем, так как техника устарела",
        "Запрос по неизвестной технике, по которой нет документации"
    ]
    steps: List[Step]
    suitable_reason: str


class Application:
    def __init__(self):
        self.logger = self.setup_logging()
        self.auth_manager = ConfigManager(
            "./data/auth.json",
            self.logger
        )
        self.config_manager = ConfigManager(
            "./data/config.json",
            self.logger
        )
        self.set_keys()
        self.app = FastAPI()
        try:
            self.conn = psycopg.connect(
                dbname="voice_ai",
                user=os.environ.get("DB_USER", ""),
                password=os.environ.get("DB_PASSWORD", ""),
                host=os.environ.get("DB_HOST", ""),
                port=os.environ.get("DB_PORT", ""),
                autocommit=True
            )
        except Exception as e:
            self.logger.error(f"Ошибка доступа к БД: {e}")
        self.setup_routes()
        self.logger.info(f"setup_routes OK")
        self.MAX_TOKENS = 1024
        self.SEED = 654321
        self.confidence = None
        self.CHANNEL_ID = os.environ.get("CHANNEL_ID", "")

    def set_keys(self):
        os.environ["1С_TOKEN"] = self.auth_manager.get("1С_TOKEN", "")
        os.environ["1C_LOGIN"] = self.auth_manager.get("1C_LOGIN", "")
        os.environ["1C_PASSWORD"] = self.auth_manager.get("1C_PASSWORD", "")
        os.environ["DB_USER"] = self.auth_manager.get("DB_USER", "")
        os.environ["DB_PASSWORD"] = self.auth_manager.get("DB_PASSWORD", "")
        os.environ["DB_HOST"] = self.auth_manager.get("DB_HOST", "")
        os.environ["DB_PORT"] = self.auth_manager.get("DB_PORT", "")
        os.environ["OPENAI_API_KEY"] = self.auth_manager.get(
            "OPENAI_API_KEY",
            ""
        )
        os.environ["ANTHROPIC_API_KEY"] = self.auth_manager.get(
            "ANTHROPIC_API_KEY",
            ""
        )
        os.environ["REASON_TOKEN"] = self.auth_manager.get(
            "REASON_TOKEN",
            ""
        )
        self.logger.info("Auth data set successfully")

    def setup_logging(self):
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)
        logger.setLevel(logging.INFO)
        return logger

    def text_response(self, text):
        return JSONResponse(content={"type": "text", "body": str(text)})

    def setup_routes(self):
        @self.app.get("/test")
        def test():
            return self.text_response("not ok")
        # Endpoint for checking reguest refusal
        @self.app.get("/refusal_check/{received_token}/{bid_id}")
        async def reasons_comparsion(
            received_token: str,
            bid_id: str
        ):
            # return self.text_response("ok")
            correct_token = os.environ.get("REASON_TOKEN", "")
            if received_token != correct_token:
                answer = "Неверный токен запроса причины отказа"
                return self.text_response(answer)
            
            query = """
            WITH linked_calls AS (
                SELECT DISTINCT
                    linkedid,
                    call_date
                FROM calls
                WHERE bid_id = %s
            ),
            sorted_transcriptions AS (
                SELECT 
                    t.linkedid,
                    t.start,
                    t.text,
                    lc.call_date
                FROM transcribations t
                JOIN linked_calls lc ON t.linkedid = lc.linkedid
                WHERE t.text IS NOT NULL AND t.text <> ''
                ORDER BY lc.call_date, t.linkedid, t.start
            )
            SELECT linkedid, text
            FROM sorted_transcriptions;
            """

            try:
                with self.conn.cursor() as cur:
                    cur.execute(query, (bid_id,))
                    results = cur.fetchall()

                    conversations = {}
                    for linkedid, text in results:
                        if linkedid not in conversations:
                            conversations[linkedid] = []
                        conversations[linkedid].append(text)

                    full_text = []
                    for linkedid, texts in conversations.items():
                        conversation_text = ". ".join(
                            text.strip() for text in texts
                        )
                        full_text.append(
                            f"Следующий диалог в разговоре: {conversation_text}"
                        )
                    final_text = "\n".join(full_text)
            except Exception as e:
                self.logger.error(f"Ошибка при работе с базой данных: {e}")

            try:
                client = AsyncOpenAI(
                    api_key=os.environ.get("OPENAI_API_KEY", "")
                )
                temperature = self.config_manager.get("openai_temperature")
                messages = [
                    {
                        "role": "system",
                        "content": """Вы специалист по маркетингу и работе с возражениями, отказами клиентов, а также профессиональный социолог.
Далее представлены диалоги в рамках одной заявки в сервисный центр. Проанализируйте их все и выберите наиболее подходящую причину отказа по данной заявке из имеющегося у вас списка, отказ это когда клиент отказался от услуг мастера, часто отказ сопровождается словами Отбой, тогда не надо, отмените заявку и т.п., если в диалогах в контексте отказа действительно фигурировало именно то, что вы выбираете, то есть должна быть информация именно про это в разговоре, а НЕ про что-то ещё, пусть и похожее.
ТОЛЬКО если вы АБСОЛЮТНО уверены, что в диалогах ТОЧНО никоим образом НЕ фигурировал отказ, клиент не говорил отбой, отмените заявку и другими способами не отказывался от услуг или диалоги в принципе отсутствуют, ТОЛЬКО ТОГДА выбирайте соответствующую причину из представленных - "Не было отказа".
Возвращайте только именно ТЕКСТ самой причины ДОСЛОВНО, именно так, как она была записана ИЗНАЧАЛЬНО в списке.""",
                    },
                    {"role": "user", "content": final_text}
                ]
                response = await client.beta.chat.completions.parse(
                    model=self.config_manager.get("openai_model"),
                    temperature=temperature,
                    seed=self.SEED,
                    max_tokens=self.MAX_TOKENS,
                    response_format=ReasonResponse,
                    messages=messages,
                    logprobs=True
                )
                llm_reason = response.choices[0].message
                if llm_reason.parsed:
                    llm_reason = llm_reason.parsed.suitable_reason
                else:
                    self.logger.warning(
                        "Error in structured output, change to reserve model"
                    )
                    messages = [
                        {
                            "role": "system",
                            "content": """Вы специалист по маркетингу и работе с возражениями, отказами клиентов, а также профессиональный социолог.
Далее представлены диалоги в рамках одной заявки в сервисный центр. Проанализируйте их все и выберите наиболее подходящую причину отказа по данной заявке из списка ниже, если в диалогах в контексте отказа действительно фигурировало именно то, что вы выбираете, то есть должна быть информация именно про это в разговоре, а НЕ про что-то ещё, пусть и похожее.
ТОЛЬКО если вы АБСОЛЮТНО уверены, что в диалогах ТОЧНО никоим образом НЕ фигурировал отказ или диалоги в принципе отсутствуют, ТОЛЬКО ТОГДА выбирайте соответствующую причину из представленных - "Не было отказа".
Возвращайте только именно ТЕКСТ самой причины ДОСЛОВНО, именно так, как она была записана ИЗНАЧАЛЬНО в списке.
Список возможных причин:
Не было отказа;
Выбранную услугу, ремонт уже оказал или оказывает другой человек: мастер, знакомый и тому подобное;
Клиент посчитал, что для него дорого стоит именно сама диагностика, не что-то ещё другое, её цена большая - должна обязательно фигурировать оцененная стоимость диагностики, а сама причина быть озвучена до прибытия мастера на адрес;
Техника заработала, неполадка исправилась, проблема решена, не требует вмешательства;
Клиент посчитал, что для него дорого стоят именно сами работы, ремонт, услуги, их цена большая, в том числе с учётом возможно предложенной скидки - должна обязательно фигурировать оцененная стоимость работ, а сама причина быть озвучена до прибытия мастера на адрес;
Оказался сложный ремонт, крупногабаритная техника или ещё какая-то причина, по которой ремонт осуществляется только в стационарном сервисном центре, не на дому;
Клиент посчитал, что для него дорого стоит именно сам выезд мастера по его дальнему адресу, не сами услуги / ремонт, цена выезда большая - должна обязательно фигурировать оцененная стоимость выезда, а сама причина быть озвучена до прибытия мастера на адрес;
Был осуществлен дублирующий вызов по одной и той же услуге, технике по тому же адресу и в то же время - именно повторный вызов после работ в прошлый раз не подходит и сюда не относится;
Заявка по безналичному расчету, оформляется в другом отделе;
Был неправильно указан телефон и / или адрес заказчика;
Гарантийный ремонт по гарантии именно производителя, не сервисного центра;
Не успели привезти необходимую технику - подходит, только если требовалась установка техники или если речь о кондиционерах;
Вместо ремонта, услуги клиент решил купить новую технику на замену и обязательно уже оплатил её, ждёт доставку или уже получил - ещё только намерение купить сюда не относится;
Компания не осуществляет запрошенные услуги / ремонт конкретной нужной техники;
Техника была разобрана и находится в этом же состоянии или в собранном частично, либо же заявка на сборку техники;
Не подготовлено должным образом место для работы: недостаточная площадь помещения, техника заставлена предметами, встроена в дорогую мебель и тому подобное;
Антисанитарные условия на адресе: насекомые, сильная грязь, захламлённость и тому подобное, помещение требует предварительной санитарной обработки;
Именно клиент и мастер не смогли договориться именно сами друг с другом об удобном времени визита;
Мастер по той или иной причине не поехал к клиенту, хотя должен был в уже обязательно оговоренное время, также мог изначально в том числе даже не позвонить клиенту;
Клиент бросает трубку, не хочет разговаривать - подходит, только если клиент поднял трубку изначально и что-то услышал;
Мастер не может дозвониться до клиента, не берут трубку, либо же клиент сам уточнил, что не сможет дождаться мастера, не сможет быть по указанному адресу и тому подобное;
Нет нужных деталей на складе, либо слишком долго ждать их поставки, либо нет в принципе возможности заказать нужные детали;
Недоступны нужные детали по причине именно снятия их с производства производителем, так как техника устарела;
Запрос по неизвестной технике, по которой нет документации""",
                        },
                        {"role": "user", "content": final_text}
                    ]
                    response = await client.chat.completions.create(
                        model=self.config_manager.get("reserve_openai_model"),
                        temperature=temperature,
                        seed=self.SEED,
                        max_tokens=self.MAX_TOKENS,
                        messages=messages,
                        logprobs=True
                    )
                    llm_reason = response.choices[0].message.content
                
                self.confidence = np.exp([
                    token.logprob for token in response.choices[0].logprobs.content
                ]).mean()

            except RateLimitError as oai_limit_error:
                self.logger.error(
                    f"""Exceeded OpenAI quota: {oai_limit_error},
                    change to Anthropic model"""
                )
                client = AsyncAnthropic(
                    api_key=os.environ.get("ANTHROPIC_API_KEY", "")
                )
                response = await client.messages.create(
                    model=self.config_manager.get("anthropic_model"),
                    temperature=self.config_manager.get("anthropic_temperature"),
                    max_tokens=self.MAX_TOKENS,
                    system="""Вы специалист по маркетингу и работе с возражениями, отказами клиентов, а также профессиональный социолог.
Далее представлены диалоги в рамках одной заявки в сервисный центр. Проанализируйте их все и выберите наиболее подходящую причину отказа по данной заявке из списка ниже, если в диалогах в контексте отказа действительно фигурировало именно то, что вы выбираете, то есть должна быть информация именно про это в разговоре, а НЕ про что-то ещё, пусть и похожее.
ТОЛЬКО если вы АБСОЛЮТНО уверены, что в диалогах ТОЧНО никоим образом НЕ фигурировал отказ или диалоги в принципе отсутствуют, ТОЛЬКО ТОГДА выбирайте соответствующую причину из представленных - "Не было отказа".
Возвращайте в ответе ТОЛЬКО именно ТЕКСТ самой причины ДОСЛОВНО, именно так, как она была записана ИЗНАЧАЛЬНО в списке, БЕЗ каких-либо своих размышлений!
Список возможных причин:
Не было отказа;
Выбранную услугу, ремонт уже оказал или оказывает другой человек: мастер, знакомый и тому подобное;
Клиент посчитал, что для него дорого стоит именно сама диагностика, не что-то ещё другое, её цена большая - должна обязательно фигурировать оцененная стоимость диагностики, а сама причина быть озвучена до прибытия мастера на адрес;
Техника заработала, неполадка исправилась, проблема решена, не требует вмешательства;
Клиент посчитал, что для него дорого стоят именно сами работы, ремонт, услуги, их цена большая, в том числе с учётом возможно предложенной скидки - должна обязательно фигурировать оцененная стоимость работ, а сама причина быть озвучена до прибытия мастера на адрес;
Оказался сложный ремонт, крупногабаритная техника или ещё какая-то причина, по которой ремонт осуществляется только в стационарном сервисном центре, не на дому;
Клиент посчитал, что для него дорого стоит именно сам выезд мастера по его дальнему адресу, не сами услуги / ремонт, цена выезда большая - должна обязательно фигурировать оцененная стоимость выезда, а сама причина быть озвучена до прибытия мастера на адрес;
Был осуществлен дублирующий вызов по одной и той же услуге, технике по тому же адресу и в то же время - именно повторный вызов после работ в прошлый раз не подходит и сюда не относится;
Заявка по безналичному расчету, оформляется в другом отделе;
Был неправильно указан телефон и / или адрес заказчика;
Гарантийный ремонт по гарантии именно производителя, не сервисного центра;
Не успели привезти необходимую технику - подходит, только если требовалась установка техники или если речь о кондиционерах;
Вместо ремонта, услуги клиент решил купить новую технику на замену и обязательно уже оплатил её, ждёт доставку или уже получил - ещё только намерение купить сюда не относится;
Компания не осуществляет запрошенные услуги / ремонт конкретной нужной техники;
Техника была разобрана и находится в этом же состоянии или в собранном частично, либо же заявка на сборку техники;
Не подготовлено должным образом место для работы: недостаточная площадь помещения, техника заставлена предметами, встроена в дорогую мебель и тому подобное;
Антисанитарные условия на адресе: насекомые, сильная грязь, захламлённость и тому подобное, помещение требует предварительной санитарной обработки;
Именно клиент и мастер не смогли договориться именно сами друг с другом об удобном времени визита;
Мастер по той или иной причине не поехал к клиенту, хотя должен был в уже обязательно оговоренное время, также мог изначально в том числе даже не позвонить клиенту;
Клиент бросает трубку, не хочет разговаривать - подходит, только если клиент поднял трубку изначально и что-то услышал;
Мастер не может дозвониться до клиента, не берут трубку, либо же клиент сам уточнил, что не сможет дождаться мастера, не сможет быть по указанному адресу и тому подобное;
Нет нужных деталей на складе, либо слишком долго ждать их поставки, либо нет в принципе возможности заказать нужные детали;
Недоступны нужные детали по причине именно снятия их с производства производителем, так как техника устарела;
Запрос по неизвестной технике, по которой нет документации""",
                    messages=[
                        {"role": "user", "content": final_text},
                    ]
                )
                llm_reason = response.content[0].text
            
            try:
                answer = {
                    "llm_reason_id": self.config_manager.get("reasons")[llm_reason],
                    "confidence": self.confidence if self.confidence else 2.0
                }
                return JSONResponse(
                    content=answer
                )
            except Exception as e:
                self.logger.error(f"Error in getting refusal reason: {e}")

application = Application()
app = application.app